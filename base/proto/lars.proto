syntax = "proto3";

package lars;

/* Lars系统消息ID */
enum MessageId {
    ID_UNKNOW               = 0;  //proto3协议规定enum第一个属性必须是0，用来占位
    ID_GetRouteRequest      = 1;  //向DNS请求Route对应的关系的消息ID
    ID_GetRouteResponse     = 2;  //DNS回复的Route信息的消息ID
    ID_ReportStatusRequest  = 3;  //上报host调用状态信息请求的消息ID
    ID_GetHostRequest       = 4;  //业务层API发送请求host信息给Lb Agent模块的消息ID
    ID_GetHostResponse      = 5;  //Lb Agent回执给业务层API host信息的消息ID
    ID_ReportHostRequest    = 6;  //API ---> Agent 上报结果请求的消息ID
    ID_API_GetRouteRequest  = 7;  //API ---> Agent 获取某个modid/cmdid的所有host信息的消息ID
    ID_API_GetRouteResponse = 8;  //Agent 回执给 API 的全部host的route信息的消息ID

}

enum LarsRetCode {
    RET_SUCC         = 0;
    RET_OVERLOAD     = 1; //超载
    RET_SYSTEM_ERROR = 2; //系统错误
    RET_NOEXIST      = 3; //资源不存在
}

/* 一个管理的主机的信息 */
message HostInfo {
    int32 ip = 1;
    int32 port = 2;
}

/* 请求lars-dns route信息的消息内容 */
message GetRouteRequest {
    int32 modid = 1;
    int32 cmdid = 2;
}

/* lars-dns 回复的route信息消息内容 */
message GetRouteResponse {
    int32 modid = 1;
    int32 cmdid = 2;
    repeated HostInfo host = 3;
}

message HostCallResult {
    int32 ip = 1;           //主机ip
    int32 port = 2;         //主机端口
    uint32 succ = 3;        //调度成功
    uint32 err = 4;         //调度失败
    bool overload = 5;      //是否过载
}

//上报 负载均衡 调度数据 给lars_reporter的消息内容
message ReportStatusRequest {
    int32 modid = 1;
    int32 cmdid = 2;
    int32 caller = 3;
    repeated HostCallResult results = 4;
    uint32 ts = 5;
}

//API请求Lb Agent获取host信息(UDP)
message GetHostRequest {
    uint32 seq = 1;
    int32 modid = 2;
    int32 cmdid = 3;
}

message GetHostResponse {
    uint32 seq = 1;
    int32 modid = 2;
    int32 cmdid = 3;
    int32 retcode = 4;
    HostInfo host = 5;
}

message ReportHostRequest {
    int32 modid = 1;
    int32 cmdid = 2;
    HostInfo host = 3;
    int32 retcode = 4;
}